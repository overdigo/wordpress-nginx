upstream php{{PHP_VERSION_NO_DOT}} {
    least_conn;

    server unix:/run/php/php{{PHP_VERSION}}-fpm1.sock;
    server unix:/run/php/php{{PHP_VERSION}}-fpm2.sock;

    keepalive 5;
}

upstream php{{PHP_VERSION_NO_DOT}}_admin {
    server unix:/run/php/php{{PHP_VERSION}}-fpm-admin.sock;

    keepalive 5;
}

# Define map variables for WebP and AVIF support
map $http_accept $webp_suffix {
    default "";
    "~*webp" ".webp";
}

map $http_accept $avif_suffix {
    default "";
    "~*avif" ".avif";
}

server {
    listen 80;
    listen [::]:80;
    server_name {{DOMAIN}};
    
    access_log /var/log/nginx/{{DOMAIN}}.access.log rt_cache buffer=32k flush=1m;
    error_log /var/log/nginx/{{DOMAIN}}.error.log error;
    
    root {{SITE_ROOT}};
    index index.php;

    # Disable access to sensitive files
    location = /wp-config.php { deny all; }
    location = /readme.html { deny all; }
    location = /license.txt { deny all; }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        include fastcgi_params;
        
        # Default pool for all other requests
        if ($uri !~* "/wp-admin/|wp-login.php") {
            fastcgi_pass php{{PHP_VERSION_NO_DOT}};
            include fastcgi_params;
        }
    }
    
    # Limit access to avoid brute force attack
    location = /wp-login.php {
        limit_req zone=one burst=1 nodelay;
        include snippets/fastcgi-php.conf;
        fastcgi_pass php{{PHP_VERSION_NO_DOT}}_admin;
    }
    
    # Prevent DoS attacks on wp-cron
    location = /wp-cron.php {
        limit_req zone=two burst=1 nodelay;
        include snippets/fastcgi-php.conf;
        fastcgi_pass php{{PHP_VERSION_NO_DOT}};
    }
    
    # Prevent DoS attacks with xmlrpc.php
    location = /xmlrpc.php {
        # Whitelist Jetpack IP ranges, Allow all Communications Between Jetpack and WordPress.com
        allow 122.248.245.244/32;
        allow 54.217.201.243/32;
        allow 54.232.116.4/32;
        allow 192.0.80.0/20;
        allow 192.0.96.0/20;
        allow 192.0.112.0/20;
        allow 195.234.108.0/22;

        # Deny all other requests
        deny all;

        # Disable access and error logging
        access_log off;
        log_not_found off;

        # Limit the rate of requests to prevent DoS attacks
        limit_req zone=two burst=1 nodelay;

        # Pass the request to PHP-FPM backend
        include snippets/fastcgi-php.conf;
        fastcgi_pass php{{PHP_VERSION_NO_DOT}};
    }
    
    # Disable wp-config.txt
    location = /wp-config.txt {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location = /robots.txt {
        # Some WordPress plugin gererate robots.txt file
        # Refer #340 issue
        try_files $uri $uri/ /index.php?$args @robots;
        access_log off;
        log_not_found off;
    }
    
    # fallback for robots.txt with default wordpress rules
    location @robots {
        return 200 "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n";
    }
    
    # webp rewrite rules for jpg and png images
    # try to load alternative image.png.webp before image.png
    location /wp-content/uploads {
        location ~ \.(png|jpe?g)$ {
            add_header Vary "Accept-Encoding";
            add_header Access-Control-Allow-Origin "*";
            add_header Cache-Control "public, no-transform";
            access_log off;
            log_not_found off;
            expires max;
            try_files $uri$avif_suffix $uri$webp_suffix $uri =404;
        }
        
        location ~* \.(php|gz|log|zip|tar|rar|xz)$ {
            #Prevent Direct Access Of PHP Files & Backups from Web Browsers
            deny all;
        }
    }
    
    # webp rewrite rules for EWWW testing image
    location /wp-content/plugins/ewww-image-optimizer/images {
        location ~ \.(png|jpe?g)$ {
            add_header Vary "Accept-Encoding";
            add_header Access-Control-Allow-Origin "*";
            add_header Cache-Control "public, no-transform";
            access_log off;
            log_not_found off;
            expires max;
            try_files $uri$avif_suffix $uri$webp_suffix $uri =404;
        }
        
        location ~ \.php$ {
            #Prevent Direct Access Of PHP Files From Web Browsers
            deny all;
        }
    }
    
    # enable gzip on static assets - php files are forbidden
    location /wp-content/cache {
        # Cache css & js files
        location ~* \.(?:css(\.map)?|js(\.map)?|.html)$ {
            add_header Access-Control-Allow-Origin "*";
            access_log off;
            log_not_found off;
            expires 1y;
        }
        
        location ~ \.php$ {
            #Prevent Direct Access Of PHP Files From Web Browsers
            deny all;
        }
    }
    
    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }
    
    # mitigate DoS attack with WordPress script concatenation
    # add the following line to wp-config.php
    # define( 'CONCATENATE_SCRIPTS', false );
    location ~ \/wp-admin\/load-(scripts|styles).php {
        deny all;
    }
    
    # Protect Easy Digital Download files from being accessed directly.
    location ~ ^/wp-content/uploads/edd/(.*?)\.zip$ {
        rewrite / permanent;
    }
    
    # Basic locations files
    location = /favicon.ico {
        try_files /wp-content/uploads/fbrfg/favicon.ico $uri $uri/ /index.php?$args @empty_gif;
        access_log off;
        log_not_found off;
        expires max;
    }
    
    location @empty_gif {
        empty_gif;
    }
    
    # Cache static files
    location ~* \.(ogg|ogv|svg|svgz|eot|otf|woff|woff2|ttf|m4a|mp4|ttf|rss|atom|jpe?g|gif|cur|heic|png|tiff|ico|webm|mp3|aac|tgz|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|swf|webp|json|webmanifest|cast)$ {
        add_header Access-Control-Allow-Origin "*";
        add_header Cache-Control "public, no-transform";
        access_log off;
        log_not_found off;
        expires max;
    }
    
    # Cache css & js files
    location ~* \.(?:css(\.map)?|js(\.map)?)$ {
        add_header Access-Control-Allow-Origin "*";
        add_header Cache-Control "public, no-transform";
        access_log off;
        log_not_found off;
        expires 1y;
    }
    
    # Security settings for better privacy
    # Deny hidden files
    location ~ /\.(?!well-known\/) {
        deny all;
    }
    
    # letsencrypt validation
    location /.well-known/acme-challenge/ {
        alias /var/www/html/.well-known/acme-challenge/;
        allow all;
        auth_basic off;
    }
    
    # Private Prefetch Proxy
    # https://developer.chrome.com/blog/private-prefetch-proxy/
    location /.well-known/traffic-advice {
        types { } default_type "application/trafficadvice+json; charset=utf-8";
        return 200 "[{\n  \"user_agent\": \"prefetch-proxy\",\n  \"google_prefetch_proxy_eap\": {\n    \"fraction\": 1.0\n  }\n}]";
        allow all;
    }
    
    # Return 403 forbidden for readme.(txt|html) or license.(txt|html) or example.(txt|html) or other common git repository files
    location ~*  "/(^$|readme|license|example|README|LEGALNOTICE|INSTALLATION|CHANGELOG)\.(txt|html|md)" {
        deny all;
    }
    
    # Deny backup extensions & log files and return 403 forbidden
    location ~* "\.(old|orig|original|php#|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf|gz|zip|bz2|7z|pem|asc|conf|dump)$" {
        deny all;
    }
    
    location ~* "/(=|\$&|_mm|(wp-)?config\.|cgi-|etc/passwd|muieblack)" {
        deny all;
    }

    # Block suspicious requests
    location ~* "(base64_encode)(.*)(\()" {
        deny all;
    }

    location ~* "(eval\()" {
        deny all;
    }

    location ~* "(127\.0\.0\.1)" {
        deny all;
    }
    
    location ~* "([a-z0-9]{2000})" {
        deny all;
    }
    
    location ~* "(javascript\:)(.*)(\;)" {
        deny all;
    }
    
    location ~* "(GLOBALS|REQUEST)(=|\[|%)" {
        deny all;
    }
    
    location ~* "(<|%3C).*script.*(>|%3)" {
        deny all;
    }    
    # Security patterns provided by the user
    location ~ "(\\|\.\.\.|\.\./|~|`|<|>|\|)" {
        deny all;
    }
    location ~* "(boot\.ini|etc/passwd|self/environ)" {
        deny all;
    }
    location ~* "(thumbs?(_editor|open)?|tim(thumb)?)\.php" {
        deny all;
    }
    location ~* "(\'|\")(.*)(drop|insert|md5|select|union)" {
        deny all;
    }
    location ~* "(https?|ftp|php):/" {
        deny all;
    }
    location ~* "(=\\\'|=\\%27|/\\\'/?)\." {
        deny all;
    }
    location ~ "(\{0\}|\(/\(|\.\.\.|\+\+\+|\\\"\\\")" {
        deny all;
    }
    location ~ "(~|`|<|>|:|;|%|\\|\s|\{|\}|\[|\]|\|)" {
        deny all;
    }
} 